import Phaser from 'phaser';
import { LevelSystem } from '../systems/LevelSystem';
import { StoreSystem } from '../systems/StoreSystem';
import { GameState } from '../types/GameTypes';

/**
 * Main Menu Scene with Level Selection and Store Access
 */
export class MenuScene extends Phaser.Scene {
  private levelSystem!: LevelSystem;
  private storeSystem!: StoreSystem;
  private gameState!: GameState;
  private currentPage = 0;
  private levelsPerPage = 15;
  
  // UI Elements
  private background!: Phaser.GameObjects.Graphics;
  private titleText!: Phaser.GameObjects.Text;
  private levelContainer!: Phaser.GameObjects.Container;
  private storeButton!: Phaser.GameObjects.Container;
  private settingsButton!: Phaser.GameObjects.Container;
  private prevPageButton!: Phaser.GameObjects.Container;
  private nextPageButton!: Phaser.GameObjects.Container;
  private coinDisplay!: Phaser.GameObjects.Container;
  private progressBar!: Phaser.GameObjects.Graphics;
  
  constructor() {
    super({ key: 'MenuScene' });
  }
  
  init(data: { gameState: GameState }) {
    this.levelSystem = new LevelSystem();
    this.storeSystem = new StoreSystem();
    this.gameState = data.gameState || this.createInitialGameState();
  }
  
  create() {
    this.createBackground();
    this.createTitle();
    this.createCoinDisplay();
    this.createProgressBar();
    this.createLevelGrid();
    this.createNavigationButtons();
    this.createMenuButtons();
    this.updateDisplay();
  }
  
  private createBackground(): void {
    this.background = this.add.graphics();
    this.background.fillGradientStyle(0x0b0d10, 0x0b0d10, 0x1a2f1a, 0x1a2f1a, 1);
    this.background.fillRect(0, 0, this.scale.width, this.scale.height);
    
    // Add animated background elements
    this.createBackgroundParticles();
  }
  
  private createBackgroundParticles(): void {\n    // Create subtle moving particles for visual interest\n    for (let i = 0; i < 20; i++) {\n      const particle = this.add.circle(\n        Math.random() * this.scale.width,\n        Math.random() * this.scale.height,\n        Math.random() * 3 + 1,\n        0x10b981,\n        0.1\n      );\n      \n      this.tweens.add({\n        targets: particle,\n        y: particle.y + Math.random() * 100 - 50,\n        x: particle.x + Math.random() * 100 - 50,\n        alpha: Math.random() * 0.3,\n        duration: 3000 + Math.random() * 2000,\n        yoyo: true,\n        repeat: -1,\n        ease: 'Sine.easeInOut'\n      });\n    }\n  }\n  \n  private createTitle(): void {\n    this.titleText = this.add.text(\n      this.scale.width / 2,\n      60,\n      'Snake Classic',\n      {\n        fontSize: '48px',\n        fontFamily: 'Arial, sans-serif',\n        color: '#ffffff',\n        stroke: '#10b981',\n        strokeThickness: 3\n      }\n    ).setOrigin(0.5);\n    \n    // Add pulsing effect to title\n    this.tweens.add({\n      targets: this.titleText,\n      scaleX: 1.05,\n      scaleY: 1.05,\n      duration: 2000,\n      yoyo: true,\n      repeat: -1,\n      ease: 'Sine.easeInOut'\n    });\n  }\n  \n  private createCoinDisplay(): void {\n    this.coinDisplay = this.add.container(this.scale.width - 150, 30);\n    \n    // Coin background\n    const coinBg = this.add.graphics();\n    coinBg.fillStyle(0x047857, 0.8);\n    coinBg.fillRoundedRect(-70, -15, 140, 30, 15);\n    coinBg.lineStyle(2, 0x10b981);\n    coinBg.strokeRoundedRect(-70, -15, 140, 30, 15);\n    \n    // Coin icon\n    const coinIcon = this.add.circle(-50, 0, 12, 0xffd700);\n    coinIcon.setStrokeStyle(2, 0xffa500);\n    \n    // Coin text\n    const coinText = this.add.text(0, 0, this.gameState.coins.toString(), {\n      fontSize: '20px',\n      fontFamily: 'Arial, sans-serif',\n      color: '#ffffff',\n      fontStyle: 'bold'\n    }).setOrigin(0.5);\n    \n    this.coinDisplay.add([coinBg, coinIcon, coinText]);\n  }\n  \n  private createProgressBar(): void {\n    const barWidth = 300;\n    const barHeight = 10;\n    const x = (this.scale.width - barWidth) / 2;\n    const y = 120;\n    \n    this.progressBar = this.add.graphics();\n    \n    // Background\n    this.progressBar.fillStyle(0x333333, 0.8);\n    this.progressBar.fillRoundedRect(x, y, barWidth, barHeight, 5);\n    \n    // Progress fill\n    const progress = this.levelSystem.getLevelProgress(this.gameState.completedLevels);\n    this.progressBar.fillStyle(0x10b981, 1);\n    this.progressBar.fillRoundedRect(x, y, barWidth * progress, barHeight, 5);\n    \n    // Progress text\n    const progressText = `${this.gameState.completedLevels.size} / 147 Levels Complete`;\n    this.add.text(\n      this.scale.width / 2,\n      y + barHeight + 20,\n      progressText,\n      {\n        fontSize: '16px',\n        fontFamily: 'Arial, sans-serif',\n        color: '#cccccc'\n      }\n    ).setOrigin(0.5);\n  }\n  \n  private createLevelGrid(): void {\n    this.levelContainer = this.add.container(0, 180);\n    \n    const startX = 80;\n    const startY = 20;\n    const spacing = 60;\n    const cols = 5;\n    const rows = 3;\n    \n    const startLevel = this.currentPage * this.levelsPerPage + 1;\n    const endLevel = Math.min(startLevel + this.levelsPerPage - 1, 147);\n    \n    let levelIndex = 0;\n    \n    for (let level = startLevel; level <= endLevel; level++) {\n      const row = Math.floor(levelIndex / cols);\n      const col = levelIndex % cols;\n      const x = startX + col * spacing;\n      const y = startY + row * spacing;\n      \n      this.createLevelButton(level, x, y);\n      levelIndex++;\n    }\n  }\n  \n  private createLevelButton(levelNumber: number, x: number, y: number): void {\n    const levelData = this.levelSystem.getLevel(levelNumber);\n    if (!levelData) return;\n    \n    const isCompleted = this.gameState.completedLevels.has(levelNumber);\n    const isUnlocked = levelNumber === 1 || this.gameState.completedLevels.has(levelNumber - 1);\n    const canPlay = isUnlocked && !isCompleted;\n    \n    // Button container\n    const buttonContainer = this.add.container(x, y);\n    \n    // Button background\n    const buttonBg = this.add.graphics();\n    let bgColor = 0x333333; // Locked\n    let borderColor = 0x555555;\n    \n    if (isCompleted) {\n      bgColor = 0x10b981; // Completed - green\n      borderColor = 0x047857;\n    } else if (isUnlocked) {\n      bgColor = 0x047857; // Available - dark green\n      borderColor = 0x10b981;\n    }\n    \n    buttonBg.fillStyle(bgColor, 0.9);\n    buttonBg.fillRoundedRect(-25, -25, 50, 50, 8);\n    buttonBg.lineStyle(2, borderColor);\n    buttonBg.strokeRoundedRect(-25, -25, 50, 50, 8);\n    \n    // Level number\n    const levelText = this.add.text(0, -5, levelNumber.toString(), {\n      fontSize: '18px',\n      fontFamily: 'Arial, sans-serif',\n      color: '#ffffff',\n      fontStyle: 'bold'\n    }).setOrigin(0.5);\n    \n    // Difficulty stars\n    const starY = 12;\n    const starSpacing = 6;\n    const starCount = Math.min(levelData.difficulty, 5);\n    const startX = -(starCount - 1) * starSpacing / 2;\n    \n    for (let i = 0; i < starCount; i++) {\n      const star = this.add.text(\n        startX + i * starSpacing,\n        starY,\n        '★',\n        {\n          fontSize: '8px',\n          color: '#ffd700'\n        }\n      ).setOrigin(0.5);\n      buttonContainer.add(star);\n    }\n    \n    buttonContainer.add([buttonBg, levelText]);\n    this.levelContainer.add(buttonContainer);\n    \n    // Add interactivity\n    if (canPlay || isCompleted) {\n      buttonContainer.setInteractive(\n        new Phaser.Geom.Rectangle(-25, -25, 50, 50),\n        Phaser.Geom.Rectangle.Contains\n      );\n      \n      buttonContainer.on('pointerover', () => {\n        buttonBg.clear();\n        buttonBg.fillStyle(bgColor, 1);\n        buttonBg.fillRoundedRect(-25, -25, 50, 50, 8);\n        buttonBg.lineStyle(3, 0xffd700);\n        buttonBg.strokeRoundedRect(-25, -25, 50, 50, 8);\n        \n        this.tweens.add({\n          targets: buttonContainer,\n          scaleX: 1.1,\n          scaleY: 1.1,\n          duration: 100\n        });\n      });\n      \n      buttonContainer.on('pointerout', () => {\n        buttonBg.clear();\n        buttonBg.fillStyle(bgColor, 0.9);\n        buttonBg.fillRoundedRect(-25, -25, 50, 50, 8);\n        buttonBg.lineStyle(2, borderColor);\n        buttonBg.strokeRoundedRect(-25, -25, 50, 50, 8);\n        \n        this.tweens.add({\n          targets: buttonContainer,\n          scaleX: 1,\n          scaleY: 1,\n          duration: 100\n        });\n      });\n      \n      buttonContainer.on('pointerdown', () => {\n        this.startLevel(levelNumber);\n      });\n    }\n    \n    // Add lock icon for locked levels\n    if (!isUnlocked) {\n      const lockIcon = this.add.text(0, 0, '🔒', {\n        fontSize: '16px'\n      }).setOrigin(0.5);\n      buttonContainer.add(lockIcon);\n    }\n    \n    // Add completion checkmark\n    if (isCompleted) {\n      const checkmark = this.add.text(18, -18, '✓', {\n        fontSize: '14px',\n        color: '#ffffff',\n        fontStyle: 'bold'\n      }).setOrigin(0.5);\n      buttonContainer.add(checkmark);\n    }\n  }\n  \n  private createNavigationButtons(): void {\n    const buttonY = this.scale.height - 80;\n    const totalPages = Math.ceil(147 / this.levelsPerPage);\n    \n    // Previous page button\n    if (this.currentPage > 0) {\n      this.prevPageButton = this.createNavButton(100, buttonY, '◀ Previous', () => {\n        this.currentPage--;\n        this.refreshLevelGrid();\n      });\n    }\n    \n    // Next page button\n    if (this.currentPage < totalPages - 1) {\n      this.nextPageButton = this.createNavButton(\n        this.scale.width - 100,\n        buttonY,\n        'Next ▶',\n        () => {\n          this.currentPage++;\n          this.refreshLevelGrid();\n        }\n      );\n    }\n    \n    // Page indicator\n    this.add.text(\n      this.scale.width / 2,\n      buttonY,\n      `Page ${this.currentPage + 1} of ${totalPages}`,\n      {\n        fontSize: '16px',\n        fontFamily: 'Arial, sans-serif',\n        color: '#cccccc'\n      }\n    ).setOrigin(0.5);\n  }\n  \n  private createNavButton(\n    x: number,\n    y: number,\n    text: string,\n    callback: () => void\n  ): Phaser.GameObjects.Container {\n    const button = this.add.container(x, y);\n    \n    const bg = this.add.graphics();\n    bg.fillStyle(0x047857, 0.8);\n    bg.fillRoundedRect(-60, -20, 120, 40, 10);\n    bg.lineStyle(2, 0x10b981);\n    bg.strokeRoundedRect(-60, -20, 120, 40, 10);\n    \n    const buttonText = this.add.text(0, 0, text, {\n      fontSize: '16px',\n      fontFamily: 'Arial, sans-serif',\n      color: '#ffffff',\n      fontStyle: 'bold'\n    }).setOrigin(0.5);\n    \n    button.add([bg, buttonText]);\n    \n    button.setInteractive(\n      new Phaser.Geom.Rectangle(-60, -20, 120, 40),\n      Phaser.Geom.Rectangle.Contains\n    );\n    \n    button.on('pointerover', () => {\n      bg.clear();\n      bg.fillStyle(0x10b981, 1);\n      bg.fillRoundedRect(-60, -20, 120, 40, 10);\n      bg.lineStyle(2, 0xffd700);\n      bg.strokeRoundedRect(-60, -20, 120, 40, 10);\n    });\n    \n    button.on('pointerout', () => {\n      bg.clear();\n      bg.fillStyle(0x047857, 0.8);\n      bg.fillRoundedRect(-60, -20, 120, 40, 10);\n      bg.lineStyle(2, 0x10b981);\n      bg.strokeRoundedRect(-60, -20, 120, 40, 10);\n    });\n    \n    button.on('pointerdown', callback);\n    \n    return button;\n  }\n  \n  private createMenuButtons(): void {\n    const buttonY = 30;\n    \n    // Store button\n    this.storeButton = this.createMenuButton(\n      30,\n      buttonY,\n      '🏪 Store',\n      () => this.openStore()\n    );\n    \n    // Settings button\n    this.settingsButton = this.createMenuButton(\n      30,\n      buttonY + 60,\n      '⚙️ Settings',\n      () => this.openSettings()\n    );\n  }\n  \n  private createMenuButton(\n    x: number,\n    y: number,\n    text: string,\n    callback: () => void\n  ): Phaser.GameObjects.Container {\n    const button = this.add.container(x, y);\n    \n    const bg = this.add.graphics();\n    bg.fillStyle(0x2d3748, 0.9);\n    bg.fillRoundedRect(-35, -15, 70, 30, 8);\n    bg.lineStyle(1, 0x4a5568);\n    bg.strokeRoundedRect(-35, -15, 70, 30, 8);\n    \n    const buttonText = this.add.text(0, 0, text, {\n      fontSize: '12px',\n      fontFamily: 'Arial, sans-serif',\n      color: '#ffffff'\n    }).setOrigin(0.5);\n    \n    button.add([bg, buttonText]);\n    \n    button.setInteractive(\n      new Phaser.Geom.Rectangle(-35, -15, 70, 30),\n      Phaser.Geom.Rectangle.Contains\n    );\n    \n    button.on('pointerover', () => {\n      this.tweens.add({\n        targets: button,\n        scaleX: 1.05,\n        scaleY: 1.05,\n        duration: 100\n      });\n    });\n    \n    button.on('pointerout', () => {\n      this.tweens.add({\n        targets: button,\n        scaleX: 1,\n        scaleY: 1,\n        duration: 100\n      });\n    });\n    \n    button.on('pointerdown', callback);\n    \n    return button;\n  }\n  \n  private refreshLevelGrid(): void {\n    this.levelContainer.destroy();\n    if (this.prevPageButton) this.prevPageButton.destroy();\n    if (this.nextPageButton) this.nextPageButton.destroy();\n    \n    this.createLevelGrid();\n    this.createNavigationButtons();\n  }\n  \n  private updateDisplay(): void {\n    // Update coin display\n    const coinText = this.coinDisplay.getAt(2) as Phaser.GameObjects.Text;\n    coinText.setText(this.gameState.coins.toString());\n  }\n  \n  private startLevel(levelNumber: number): void {\n    // Add sound effect\n    // this.sound.play('button_click');\n    \n    // Transition to game scene\n    this.scene.start('GameScene', {\n      levelNumber,\n      gameState: this.gameState\n    });\n  }\n  \n  private openStore(): void {\n    this.scene.start('StoreScene', {\n      gameState: this.gameState,\n      returnScene: 'MenuScene'\n    });\n  }\n  \n  private openSettings(): void {\n    this.scene.start('SettingsScene', {\n      gameState: this.gameState,\n      returnScene: 'MenuScene'\n    });\n  }\n  \n  private createInitialGameState(): GameState {\n    return {\n      currentLevel: 1,\n      score: 0,\n      lives: 3,\n      coins: 100,\n      experience: 0,\n      completedLevels: new Set(),\n      inventory: {\n        skins: ['classic_skin'],\n        powerups: {},\n        themes: [],\n        currentSkin: 'classic_skin',\n        currentTheme: 'default'\n      },\n      settings: {\n        soundEnabled: true,\n        musicEnabled: true,\n        vibrationEnabled: true,\n        controlScheme: 'swipe',\n        difficulty: 'normal'\n      },\n      statistics: {\n        totalScore: 0,\n        gamesPlayed: 0,\n        totalPlayTime: 0,\n        foodEaten: {\n          apple: 0,\n          golden: 0,\n          speed: 0,\n          shrink: 0,\n          multi: 0,\n          power: 0,\n          mystery: 0,\n          bomb: 0,\n          freeze: 0,\n          coin: 0\n        },\n        levelsCompleted: 0,\n        longestSnake: 3,\n        perfectRuns: 0\n      }\n    };\n  }\n}